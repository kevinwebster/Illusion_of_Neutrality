# -*- coding: utf-8 -*-
"""
Analysis Notebook for "Fairness Is Not Enough" - Experiment 1

This notebook replicates the statistical analysis for Appendix B, Item 3.
It compares the consistency between the "fast" and "slow" versions of each
AI model provider to see if they evaluate résumés similarly.
"""

# =============================================================================
# 1. SETUP: LOAD LIBRARIES AND DATA
# =============================================================================
import pandas as pd
import numpy as np

# --- Load the dataset ---
# In Google Colab, you must first upload your "Combined Data.csv" file.
try:
    df = pd.read_csv('Combined Data.csv')
    print("Successfully loaded 'Combined Data.csv'")
    print("Data shape:", df.shape)

    # --- Standardize column names to lowercase for consistency ---
    df.columns = [col.lower() for col in df.columns]
    print("Standardized column headers:", df.columns.tolist())

except FileNotFoundError:
    print("Error: 'Combined Data.csv' not found.")
    print("Please make sure you have uploaded the file to your Google Colab environment.")
    df = pd.DataFrame() # Create an empty dataframe to avoid further errors

# =============================================================================
# 2. DATA PREPARATION
# =============================================================================
if not df.empty:
    # --- Correctly Identify and Label the Control Group ---
    # The control group is identified by having a blank/null value in the 'race' column.
    control_mask = df['race'].isnull()
    df.loc[control_mask, 'race'] = 'Control'
    
    # Let's confirm that we found the control rows.
    num_control_rows = df['race'].value_counts().get('Control', 0)
    print(f"\nFound and labeled {num_control_rows} control rows.")

    print("\n--- Data after preparation ---")
    # Display a sample of rows to verify the data looks correct.
    print(df[['ai', 'speed', 'job_type', 'rating', 'race']].sample(5))


# =============================================================================
# 3. ANALYSIS 3: FAST VS. SLOW MODEL CONSISTENCY
# =============================================================================
# This section replicates Appendix B, Item 3.
# It compares the mean ratings and standard deviations between the "fast" and
# "slow" versions of AI models that offer both, using ONLY the control group data.

if not df.empty:
    print("\n\n--- Analysis 3: Fast vs. Slow Model Consistency (Control Group Only) ---")
    
    # --- Filter for only the control group data for this specific analysis ---
    control_df = df[df['race'] == 'Control'].copy()

    # Calculate the mean and standard deviation for every AI, speed, and job type combination
    # using ONLY the control data.
    all_stats = control_df.groupby(['ai', 'speed', 'job_type'])['rating'].agg(['mean', 'std']).reset_index()

    # Separate the stats for "Fast" and "Slow" models
    fast_stats = all_stats[all_stats['speed'] == 'Fast'].copy()
    slow_stats = all_stats[all_stats['speed'] == 'Slow'].copy()

    # Prepare for merging by renaming columns
    fast_stats.rename(columns={'mean': '“Fast” Mean', 'std': '“Fast” SD'}, inplace=True)
    slow_stats.rename(columns={'mean': '“Slow” Mean', 'std': '“Slow” SD'}, inplace=True)

    # Merge the two dataframes on the AI provider and job type
    # An 'inner' merge ensures we only keep AI providers that have BOTH a fast and slow version.
    comparison_df = pd.merge(
        fast_stats[['ai', 'job_type', '“Fast” Mean', '“Fast” SD']],
        slow_stats[['ai', 'job_type', '“Slow” Mean', '“Slow” SD']],
        on=['ai', 'job_type'],
        how='inner'
    )

    # Calculate the difference in mean ratings (Delta)
    comparison_df['Mean Rating Δ'] = comparison_df['“Slow” Mean'] - comparison_df['“Fast” Mean']
    
    # --- Final Formatting ---
    # Rename the 'ai' and 'job_type' columns to match the final output style
    comparison_df.rename(columns={'ai': 'AI', 'job_type': 'Job Type'}, inplace=True)
    
    # Reorder columns to match the requested output
    final_columns = [
        'AI', 'Job Type', '“Fast” Mean', '“Slow” Mean', 
        'Mean Rating Δ', '“Fast” SD', '“Slow” SD'
    ]
    final_df = comparison_df[final_columns]

    # Sort for better readability
    final_df = final_df.sort_values(by=['AI', 'Job Type']).reset_index(drop=True)

    print("Comparison of Fast vs. Slow Model Ratings (Control Group Only):")
    print(final_df.to_string())


print("\n\nAnalysis Complete.")
